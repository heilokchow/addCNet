% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tGenerate.R
\name{tGenerate}
\alias{tGenerate}
\title{Generate Simulation Dataset}
\usage{
tGenerate(baseline, fs, fr, fg, n, p, zij, maxit = 10)
}
\arguments{
\item{baseline}{A function take time t as argument and return the intensity
at time t.}

\item{fs}{A function takes two arguments (time, individual id) and return
outgoing intensity.}

\item{fr}{A function takes two arguments (time, individual id) and return
incoming intensity.}

\item{fg}{A function takes two arguments (time, p^th dimension).}

\item{n}{Number of individuals in the community}

\item{p}{Number of dimension of non-homofily effect}

\item{zij}{Non-homofily effect (Need not to be orthogonal to homofily effect)
(Only non time-dependent case is supported by this package)}

\item{maxit}{Maximum individual's intensity (default is 10), user should check
carefully because it determines the performance of dataset generation}
}
\value{
\item{trial}{3 column dataframe, first column is the outgoing individual,
the second column is the incoming individual while the last column is the
time-stamp}
\item{n}{Number of individuals in the community}
\item{p}{Number of dimension of non-homofily effect}
\item{zij}{Non-homofily effect (not the original one) projected using
zProjection function internally}
}
\description{
Generate the simulation used data using user specific time
dependent outgoing and incoming functions. The homofily effect and the
non-homofily effect are user provided (currently it only allows non-time
dependent effects in this implementation)
}
\examples{

# Define Individual's time-dependent intensity
n = 50
p = 2
bs <- function(t) {0.5}
fs <- function(t, i) {0.05*(i-(n+1)/2) + 0.05*(i-(n+1)/2)*sin(2*pi*t)}
fr <- function(t, i) {0.1*(i-(n+1)/2) + 0.1*(i-(n+1)/2)*sin(2*pi*t)}
fg <- function(t, k) {0.2*k}

# Constructing Non-homofily effect
zij <- array(0, c(n, n, p))
for (i in 0:(n-1)) {
  for (j in 0:(n-1)) {
    if (i < n/3 && j < n/3) {
      zij[i, j, 1] = 1
    }
    if (i >= n/2 && j >= n/2) {
      zij[i, j, 2] = 1
    }
  }
}

result <- tGenerate(bs, fs, fr, fg, n, p, zij, maxit = 10) # maxit is different by cases

}
